plugins {
    id 'java-library'
    id 'checkstyle'
    id 'jacoco'
    id "com.github.spotbugs" version "5.0.14"
    id 'maven-publish'
    id 'signing'
    id "io.codearte.nexus-staging" version "0.30.0"
    id 'com.adarshr.test-logger' version '3.2.0'
    id "com.github.ben-manes.versions" version "0.47.0"
    id 'org.sonatype.gradle.plugins.scan' version '2.6.0'
    id "org.sonarqube" version "4.2.1.3168"
}

group = 'com.imsweb'
version = '5.4'
description = 'Java client library for SEER*API'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Werror"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    spotbugs 'com.github.spotbugs:spotbugs:4.7.3'

    api 'com.squareup.retrofit2:retrofit:2.9.0'
    api 'com.squareup.retrofit2:converter-jackson:2.9.0'

    // retrofit will not update these dependencies to fix vulnerabilities
    api 'com.squareup.okhttp3:okhttp:4.11.0'
    api 'com.squareup.okio:okio:3.4.0'

    // newer version of dependency to fix vulnerability until converter-jackson is updated
    api 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'com.google.code.bean-matchers:bean-matchers:0.14'
}

jar {
    // specify the archive name; otherwise the version is appended to the war file
    archiveFileName = 'seerapi-java.jar'

    manifest {
        attributes('Implementation-Title': 'SEER*API Java Client',
                'Implementation-Version': archiveVersion,
                'Implementation-Vendor': group,
                'Created-By': System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Automatic-Module-Name': 'com.imsweb.seerapi.client'
        )
    }
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

test {
    useJUnitPlatform()
}

checkstyle {
    toolVersion '8.29'
    configFile = file("config/checkstyle/checkstyle.xml")
}

spotbugs {
    excludeFilter = file('config/spotbugs/spotbugs-exclude.xml')
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}
test.finalizedBy jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectKey", "imsweb_seerapi-client-java"
        property "sonar.organization", "imsweb"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

// Nexus vulnerability scan (see https://github.com/sonatype-nexus-community/scan-gradle-plugin)
ossIndexAudit {
    outputFormat = 'DEPENDENCY_GRAPH'
    printBanner = false
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

wrapper {
    gradleVersion = '8.2.1'
    distributionType = Wrapper.DistributionType.ALL
}

// don't try to release a snapshot to a non-snapshot repository, that won't work anyway
if (version.endsWith('-SNAPSHOT')) {
    gradle.startParameter.excludedTaskNames += 'signMavenJavaPublication'
    gradle.startParameter.excludedTaskNames += 'closeAndReleaseRepository'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'seerapi-client-java'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'SEER*API Java Client'
                description = 'API mapping for SEER*API in Java'
                url = 'https://github.com/imsweb/seerapi-client-java'
                inceptionYear = '2014'

                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'ctmay4'
                        name = 'Chuck May'
                        email = 'mayc@imsweb.com'
                    }
                    developer {
                        id = 'depryf'
                        name = 'Fabian Depry'
                        email = 'depryf@imsweb.com'
                    }
                }

                scm {
                    url = 'https://github.com/imsweb/seerapi-client-java'
                    connection = 'scm:https://github.com/imsweb/seerapi-client-java.git'
                    developerConnection = 'scm:git@github.com:imsweb/seerapi-client-java.git'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = project.findProperty('nexusUsername') ?: ''
                password = project.findProperty('nexusPassword') ?: ''
            }
        }
    }
}

signing {
    def signingKey = project.findProperty('signingKey') ?: ''
    def signingPassword = project.findProperty('signingPassword') ?: ''

    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// configure nexus staging plugin
nexusStaging {
    numberOfRetries = 50
    delayBetweenRetriesInMillis = 5000
}
